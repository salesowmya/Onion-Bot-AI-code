# -*- coding: utf-8 -*-
"""Copy of STM accuracy and prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CQJu8kKUkOFZx13dy41Qab4MO189u5ZA
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Assuming your datad in a CSV file named 'plant_data.csv'
df = pd.read_csv('/content/dataset.csv',encoding='latin1')

# Extracting features (temperature and soil moisture) and target (height)
X = df[['Temperature (°C)', 'Soil Moisture']].values
y = df['Height (cm)'].values

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Training a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Evaluating the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Example prediction
temperature = 25  # example temperature value
soil_moisture = 550  # example soil moisture value
prediction = model.predict([[temperature, soil_moisture]])
print(f'Predicted height: {prediction[0]} cm')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import h5py

# Assuming your dataset is stored in a CSV file named 'plant_data.csv'
df = pd.read_csv('/content/dataset.csv',encoding='latin1')

# Extracting features (temperature and soil moisture) and target (height)
X = df[['Temperature (°C)', 'Soil Moisture']].values
y = df['Height (cm)'].values

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Training a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Evaluating the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Example prediction
temperature = 25  # example temperature value
soil_moisture = 550  # example soil moisture value
prediction = model.predict([[temperature, soil_moisture]])
print(f'Predicted height: {prediction[0]} cm')

# Saving the model to an HDF5 file
model_filename = 'plant_height_prediction_model.h5'
with h5py.File(model_filename, 'w') as file:
    file.create_dataset('model_weights', data=model.coef_)
    file.create_dataset('model_bias', data=model.intercept_)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import numpy as np

# Load your dataset
data = pd.read_csv("/dataset.csv", encoding='latin1')

# Assuming your target variable is stored in a column named "Height (cm)"
X = data[['Temperature (°C)', 'Soil Moisture']]
y = data['Height (cm)']

# Normalize the features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Reshape the input data to be 3D for LSTM
X_reshaped = X_scaled.reshape(X_scaled.shape[0], 1, X_scaled.shape[1])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_reshaped, y.values, test_size=0.2, random_state=42)

# Initialize LSTM model
model = Sequential()
model.add(LSTM(100, activation='relu', input_shape=(1, X.shape[1])))
model.add(Dropout(0.2))  # Add dropout with a rate of 0.2
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)

# Calculate predictions
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Round predictions to nearest integer
y_pred_train_rounded = np.round(y_pred_train).reshape(-1,)
y_pred_test_rounded = np.round(y_pred_test).reshape(-1,)

# Calculate accuracy
train_accuracy = np.mean(y_pred_train_rounded == y_train)
test_accuracy = np.mean(y_pred_test_rounded == y_test)

print(f'Training Accuracy: {train_accuracy}')
print(f'Testing Accuracy: {test_accuracy}')

# Save the model
model.save('/path/to/your/model.h5')